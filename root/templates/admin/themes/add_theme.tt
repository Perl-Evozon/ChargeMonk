[% WRAPPER layouts/admin.tt %]

<link href="/static/css/bootstrap-fileupload.css" rel="stylesheet">
<script src = "/static/js/bootstrap-fileupload.js"></script>
<script src = "/static/js/resample.js"></script>

<div id="content-header">
  <h1>
    Add template
  </h1>
</div>

<hr>

[% INCLUDE include/common/alerts.tt %]

<div class="container-fluid">
<p class="center">
  Themes you upload on Subscription Manager must conform with the rules outlined in the
  documentation.<br />
  <a href="#">View documentation.</a>
</p>

  <form method="post" action="#" name="add_theme_form" id="add_theme_form" enctype="multipart/form-data">
    <div class="control-group">

      <label class="control-label">Theme name: </label>
      <div class="form-group">
        <input type="text" id="name" name="name" maxlength="100" required />
      </div>

      <label class="control-label">Upload CSS: </label>
      <div class="form-group">
        <div class="fileupload fileupload-new" data-provides="fileupload">
          <div class="input-append">
            <div class="uneditable-input span3">
              <i class="icon-file fileupload-exists"></i>
              <span class="fileupload-preview"></span>
            </div>
            <span class="btn btn-file"><span class="fileupload-new">Select file</span><span class="fileupload-exists">Change</span><input type="file" id="css_file" name="css_file" required /></span><a href="#" class="btn fileupload-exists" data-dismiss="fileupload">Remove</a>
          </div>
        </div>
      </div>

      <label class="control-label">Upload image: </label>
      <div class="form-group">
        <div class="fileupload fileupload-new" data-provides="fileupload">

          <div class="fileupload-new thumbnail" style="width: 50px; height: 50px;">
            <img src="http://www.placehold.it/50x50/EFEFEF/AAAAAA" name="uploaded_photo" id="uploaded_photo">
            <input type="hidden" style="display: none" value="" id="photo_input" name="photo_input"/>
          </div>

          <div class="fileupload-preview fileupload-exists thumbnail" style="max-width:300px; max-height:200px;" id="img" name="photo_preview"></div>
            <span class="btn btn-file">
              <span class="fileupload-new">Select image</span>
              <span class="fileupload-exists">Change</span>
              <input type="file" accept="image/*" id="file"/>
            </span>
          <a class="btn fileupload-exists" data-dismiss="fileupload" href="#">Remove</a>
        </div>
        <div style="display: none">
          <input id="width" type="text" value="300" />
          <input id="height" type="text" value="200"/>
          <br /><span id="message"></span><br />
        </div>
      </div>


      <div class="form-group">
        <label><input type="checkbox" name="active" /> Activate theme </label>

      </div>

      <div class="center">
        <button class="btn" type="submit" id="submit_add_theme_form"><i class="icon icon-ok"></i> Save</button>
        &nbsp;or&nbsp;
        <a href="#" onclick="goBack();">Cancel</a>
      </div>

    </div>
  </form>
</div>

<script>
  $(document).ready(function(){

  //  $("#add_theme_form").on('submit',function(e){
  //  var image = $('#img img').attr('src');
  //  var bbb = image.replace("image/png", "image/octet-stream");
  //  $("#photo_input").val(bbb);
  //  e.preventDefault;
  //});
  //

  $("#add_theme_form").on('submit',function(){
    $("#photo_input").val($('#img img').attr('src'));
  });
});


	(function (global, $width, $height, $file, $message, $img) {

		// (C) WebReflection Mit Style License

		// simple FileReader detection
		if (!global.FileReader)
			// no way to do what we are trying to do ...
			return $message.innerHTML = "FileReader API not supported"
		;

		// async callback, received the
		// base 64 encoded resampled image
		function resampled(data) {
			$message.innerHTML = "done";
			($img.lastChild || $img.appendChild(new Image)
			).src = data;
		}

		// async callback, fired when the image
		// file has been loaded
		function load(e) {
			$message.innerHTML = "resampling ...";
			// see resample.js
			Resample(
					this.result,
					this._width || null,
					this._height || null,
					resampled
			);

		}

		// async callback, fired if the operation
		// is aborted ( for whatever reason )
		function abort(e) {
			$message.innerHTML = "operation aborted";
		}

		// async callback, fired
		// if an error occur (i.e. security)
		function error(e) {
			$message.innerHTML = "Error: " + (this.result || e);
		}

		// listener for the input@file onchange
		$file.addEventListener("change", function change() {
			var
				// retrieve the width in pixel
				width = parseInt($width.value, 10),
				// retrieve the height in pixels
				height = parseInt($height.value, 10),
				// temporary variable, different purposes
				file
			;
			// no width and height specified
			// or both are NaN
			if (!width && !height) {
				// reset the input simply swapping it
				$file.parentNode.replaceChild(
					file = $file.cloneNode(false),
					$file
				);
				// remove the listener to avoid leaks, if any
				$file.removeEventListener("change", change, false);
				// reassign the $file DOM pointer
				// with the new input text and
				// add the change listener
				($file = file).addEventListener("change", change, false);
				// notify user there was something wrong
				$message.innerHTML = "please specify width or height";
			} else if(
				// there is a files property
				// and this has a length greater than 0
				($file.files || []).length &&
				// the first file in this list
				// has an image type, hopefully
				// compatible with canvas and drawImage
				// not strictly filtered in this example
				/^image\//.test((file = $file.files[0]).type)
			) {
				// reading action notification
				$message.innerHTML = "reading ...";
				// create a new object
				file = new FileReader;
				// assign directly events
				// as example, Chrome does not
				// inherit EventTarget yet
				// so addEventListener won't
				// work as expected
				file.onload = load;
				file.onabort = abort;
				file.onerror = error;
				// cheap and easy place to store
				// desired width and/or height
				file._width = width;
				file._height = height;
				// time to read as base 64 encoded
				// data te selected image
				file.readAsDataURL($file.files[0]);
				// it will notify onload when finished
				// An onprogress listener could be added
				// as well, not in this demo tho (I am lazy)
			} else if (file) {
				// if file variable has been created
				// during precedent checks, there is a file
				// but the type is not the expected one
				// wrong file type notification
				$message.innerHTML = "please chose an image";
			} else {
				// no file selected ... or no files at all
				// there is really nothing to do here ...
				$message.innerHTML = "nothing to do";
			}
		}, false);
	}(
		// the global object
		this,
		// all required fields ...
		document.getElementById("width"),
		document.getElementById("height"),
		document.getElementById("file"),
		document.getElementById("message"),
		document.getElementById("img")
	));
	</script>

[% END %]
